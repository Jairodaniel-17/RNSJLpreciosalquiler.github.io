const features = [
    [0, 21, 1, 2, 0, 1, 2, 1],
    [0, 16, 1, 3, 0, 1, 0, 1],
    [2, 120, 2, 1, 0, 1, 0, 1],
    [2, 70, 3, 1, 0, 1, 0, 1],
    [1, 55, 2, 4, 0, 1, 1, 0],
    [1, 100, 2, 2, 0, 1, 1, 1],
    [3, 144, 4, 3, 0, 0, 0, 1],
    [1, 55, 2, 5, 0, 1, 2, 1],
    [1, 15, 2, 2, 0, 1, 0, 0],
    [0, 30, 1, 3, 0, 1, 1, 0],
    [1, 60, 2, 3, 0, 1, 1, 0],
    [0, 40, 1, 2, 0, 1, 1, 1],
    [2, 80, 3, 1, 1, 1, 0, 1],
    [2, 65, 2, 3, 1, 1, 0, 1],
    [1, 90, 2, 2, 1, 1, 1, 1],
    [1, 70, 2, 4, 0, 1, 0, 0],
    [3, 120, 4, 3, 0, 0, 0, 1],
    [1, 65, 2, 5, 0, 1, 2, 1],
    [1, 25, 1, 2, 0, 1, 0, 0],
    [0, 35, 1, 3, 0, 1, 1, 0],
    [1, 55, 2, 3, 1, 1, 1, 0],
    [0, 30, 1, 1, 0, 0, 1, 0],
    [1, 85, 2, 3, 1, 1, 1, 1],
    [2, 75, 2, 2, 1, 1, 1, 0],
    [0, 20, 1, 4, 0, 1, 2, 1],
    [1, 60, 2, 1, 0, 1, 0, 0],
    [2, 110, 3, 3, 1, 1, 1, 1],
    [1, 45, 2, 5, 0, 1, 1, 1],
    [0, 25, 1, 2, 0, 0, 0, 1],
    [2, 95, 2, 3, 1, 1, 0, 1],
    [1, 70, 2, 4, 1, 1, 0, 0],
    [0, 35, 1, 3, 0, 1, 2, 0],
    [1, 50, 2, 2, 0, 1, 1, 1],
    [2, 80, 3, 1, 1, 1, 1, 0],
    [1, 65, 2, 3, 0, 1, 0, 1],
    [0, 40, 1, 2, 0, 1, 1, 1],
    [1, 75, 2, 5, 0, 1, 2, 0],
    [2, 100, 3, 4, 1, 1, 0, 1],
    [1, 55, 2, 1, 0, 1, 1, 0],
    [0, 30, 1, 3, 0, 1, 0, 1],
    [1, 90, 2, 2, 1, 1, 1, 1],
    [1, 70, 2, 3, 0, 1, 0, 0],
    [0, 35, 1, 2, 0, 1, 1, 0],
    [2, 80, 3, 1, 1, 1, 1, 0],
    [1, 65, 2, 3, 0, 1, 0, 1],
    [0, 40, 1, 2, 0, 1, 1, 1],
    [1, 75, 2, 5, 0, 1, 2, 0],
    [2, 130, 3, 4, 1, 1, 0, 1],
    [1, 55, 2, 1, 0, 1, 1, 0],
    [2, 90, 3, 3, 1, 1, 1, 1],
    [1, 60, 2, 4, 1, 1, 0, 0],
    [0, 35, 1, 3, 0, 1, 2, 0],
    [1, 50, 2, 2, 0, 1, 1, 1],
    [2, 80, 3, 1, 1, 1, 1, 0],
    [1, 65, 2, 3, 0, 1, 0, 1],
    [0, 40, 1, 2, 0, 1, 1, 0]
];

const targets = [600, 550, 1600, 1850, 800, 1200, 1100, 850, 400, 350, 650, 700, 1800, 1600, 1300, 850, 1100, 900, 400, 400, 750, 400, 1250, 1350, 550, 600, 1700, 750, 400, 1500, 850, 450, 700, 1800, 800, 600, 950, 1800, 600, 400, 1300, 800, 450, 1800, 800, 600, 950, 2000, 600, 1700, 850, 400, 700, 1800, 800, 600];

const capaEntrada = tf.layers.dense({ units: 8, inputShape: [8] });
const capaOculta = tf.layers.dense({ units: 8 });
const capaSalida = tf.layers.dense({ units: 1 });

const modelo = tf.sequential();
modelo.add(capaEntrada);
modelo.add(capaOculta);
modelo.add(capaSalida);
modelo.compile({ optimizer: 'adam', loss: 'meanSquaredError' });

console.log('Inicio de entrenamiento...');
modelo.fit(tf.tensor2d(features), tf.tensor1d(targets), { epochs: 1000 })
    .then((history) => {
        console.log('Modelo entrenado!');
        tf.plot.line(history.epoch, history.history.loss, { xLabel: '#Época', yLabel: 'Mágnitud de pérdida' });
        modelo.save('indexeddb://alquiler');
    });
